syntax on                                 " enable syntax highlighting
filetype plugin indent on                 " enable filetype and indentation plugins
set nocompatible                          " we certainly don't care anymore about being compatible
set encoding=utf-8                        " utf-8 all the things

set autoindent                            " keep indentation for new lines
set shiftwidth=4                          " vim shifts by 2 spaces
set softtabstop=4                         " as does tab
set tabstop=4                             " existing tabs count as 2 spaces
set expandtab                             " spaces are my preferred indentation method

augroup Numbertoggle                      " toggle relative line numbers
  autocmd!
  if exists("##TerminalOpen") == "1"
    autocmd TerminalOpen * setlocal nonumber norelativenumber
  endif

  autocmd BufEnter,FocusGained,InsertLeave * call FocusLineNumbers()
  autocmd BufLeave,FocusLost,InsertEnter * call BlurLineNumbers()

  function BlurLineNumbers()
      if &buftype != "terminal"
          setlocal norelativenumber
      endif
  endfunction

  function FocusLineNumbers()
      if &buftype != "terminal"
          setlocal relativenumber
      endif
  endfunction
augroup END

set scrolloff=2                           " always show two more lines at the window border
set number                                " show absolute line number at cursor position
set showcmd                               " show contents of command buffer
set ruler                                 " show cursor position
set nomodeline                            " disable modelines (i use local-vimrc for that, it's safer)

set incsearch                             " search as you type
set hlsearch                              " highlight matches
set ignorecase                            " search case insensitive per default...
set smartcase                             " ...but only when there is no uppercase character

set noswapfile                            " disable .swp files
set hidden                                " keep hidden file buffers instead of unloading them

set ttyfast                               " improve drawing speed

set splitright                            " split to right pane
set splitbelow                            " split to bottom pane

" color customizations {{{
set background=dark                       " dark terminal background is default
" Changes have blue-ish font color
hi DiffChange term=bold ctermbg=None ctermfg=4 guibg=DarkMagenta
" Additions have green-ish font color
hi DiffAdd term=bold ctermbg=None ctermfg=2 guibg=DarkMagenta
" Deletions have red-ish font color
hi DiffDelete term=bold ctermbg=None ctermfg=5 guibg=DarkMagenta
" Fold lines of closed folds are lime-ish
hi Folded term=standout ctermbg=None ctermfg=121 guifg=Cyan guibg=DarkGrey
hi SpellBad term=reverse ctermbg=None ctermfg=9 gui=undercurl guisp=Red
hi SyntasticWarning term=reverse ctermbg=None ctermfg=14444 gui=undercurl guisp=Red
hi clear HtmlItalic
" }}}

set nospell                               " disable spell checking (we're mostly in source code files)
augroup Git
  autocmd!
  autocmd FileType gitcommit set spell    " re-enable spell checking for commit messages
augroup END

set wildmenu                              " show auto-complete menu in command mode
set wildmode=longest:full,full            " make autocomplete more intelligent
set wildignore=*/node_modules/*,node_modules/*,*/.git/*,*/vendor/*,*/var/*,var/*

set showmatch                             " enable bracket highlights
set matchpairs=(:),{:},[:],<:>            " highlight all kinds of brackets

set foldenable                            " enable folding generally
set foldmethod=marker                     " auto-fold by markers
set foldlevel=0                           " auto-fold from first level on

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --vimgrep
endif

augroup Vue
  autocmd!
  autocmd FileType vue syntax sync fromstart " fix vue files syntax hiccups
augroup END

augroup Terminal
  autocmd!
  if exists("##TerminalOpen") == "1"
    autocmd TerminalOpen * setlocal nonumber norelativenumber
  endif
augroup END

" abbreviations {{{
inoreabbrev ive i've
inoreabbrev im i'm
inoreabbrev youve you've
inoreabbrev youre you're
inoreabbrev hes he's
inoreabbrev shes she's
inoreabbrev weve we've
inoreabbrev were we're
inoreabbrev theyve they've
inoreabbrev theyre they're
inoreabbrev theres there's
inoreabbrev wheres where's
inoreabbrev whys why's
inoreabbrev hows how's
inoreabbrev whats what's
inoreabbrev whens when's
inoreabbrev thats that's
inoreabbrev isnt isn't
inoreabbrev arent aren't
inoreabbrev wasnt wasn't
inoreabbrev werent weren't
inoreabbrev hasnt hasn't
inoreabbrev havent haven't
inoreabbrev mustnt mustn't
inoreabbrev couldnt couldn't
inoreabbrev shouldnt shouldn't
inoreabbrev wouldnt wouldn't
inoreabbrev oclock o'clock
" }}}

function ToggleWhitespace()
    if &syntax == 'whitespace'
        execute 'set syntax=' . b:original_syntax
    else
        let b:original_syntax = &syntax
        set syntax=whitespace
    endif
endfunction

" custom keyboard mappings {{{
" leader for custom commands, used by plugins
:let mapleader = ","
" allow to use jk to exit insertmode
inoremap jk <esc>
" allow to use jk to exit terminal mode
tnoremap jk <C-W>N
" remap split navigation to shorter combo
nnoremap <C-h> <C-w>h
" remap split navigation to shorter combo
nnoremap <C-j> <C-w>j
" remap split navigation to shorter combo
nnoremap <C-k> <C-w>k
" remap split navigation to shorter combo
nnoremap <C-l> <C-w>l
" disable obnoxious ex mode
nnoremap Q <nop>
" remap W to w
cnoremap W w
" shortcut to edit vimrc
nnoremap <leader>ve :tabnew ~/.vimrc<CR>
" shortcut to reload vimrc
nnoremap <leader>vr :source ~/.vimrc<CR>
" open file navigator on the leftmost side
nnoremap <leader>rr :20Vex<CR>
" toggle whitespace display
nnoremap <leader><space> :call ToggleWhitespace()<CR>
" auto insert closing parenthesis and quotes
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap < <><Left>
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap ` ``<Left>
" }}}

" vim airline plugin {{{
set runtimepath^=~/.vim/bundle/vim-airline/
set noshowmode
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#gutentags#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#branch#displayed_head_limit=20
" }}}

" vim airline theme plugin {{{
set runtimepath^=~/.vim/bundle/vim-airline-themes/
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline_solarized_dark_text = 1
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
" }}}

" vim gitgutter plugin {{{
set runtimepath^=~/.vim/bundle/vim-gitgutter/
let g:gitgutter_map_keys = 0
nnoremap <leader>gp :GitGutterPreviewHunk<CR>
nnoremap <leader>gu :GitGutterUndoHunk<CR>
nnoremap ]h :GitGutterNextHunk<CR>
nnoremap [h :GitGutterPrevHunk<CR>
" }}}

" vim rspec plugin {{{
set runtimepath^=~/.vim/bundle/vim-rspec/
set updatetime=100
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>
nnoremap <Leader>a :call RunAllSpecs()<CR>
" }}}

" vim localvimrc plugin {{{
set runtimepath^=~/.vim/bundle/vim-localvimrc/
let g:localvimrc_whitelist=['/Users/bsa/src/.*', '/home/bsa/src/.*']
let g:localvimrc_sandbox=0
" }}}

" vim gutentags plugin {{{
set runtimepath^=~/.vim/bundle/vim-gutentags/
set statusline+=%{gutentags#statusline()}
let g:gutentags_cache_dir='~/.ctagscache/'
" }}}

" tagbar plugin {{{
set runtimepath^=~/.vim/bundle/tagbar/
nnoremap <Leader>tt :Tagbar<CR>
let g:tagbar_autofocus = 1
" }}}

" pug syntax plugin {{{
set runtimepath^=~/.vim/bundle/vim-pug/
" }}}

" vim fugitive plugin {{{
set runtimepath^=~/.vim/bundle/vim-fugitive/
" }}}

" vim coc plugin {{{
set runtimepath^=~/.vim/bundle/coc.nvim/
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <c-space> coc#refresh()
nnoremap <silent> <leader>cd :call <SID>show_documentation()<CR>
nnoremap <silent> <leader>ci <Plug>(coc-diagnostic-info)<CR>
nnoremap <silent> [c <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]c <Plug>(coc-diagnostic-next)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" }}}

" FZF plugin {{{
set runtimepath^=/usr/local/opt/fzf/
" }}}

" fzf.vim plugin {{{
set runtimepath^=~/.vim/bundle/fzf.vim/
let $FZF_DEFAULT_OPTS = '--border --bind=ctrl-n:page-down,ctrl-p:page-up'
nnoremap <Leader>zf :Files<CR>
nnoremap <Leader>zt :Tags<CR>
nnoremap <Leader>zb :Buffers<CR>
nnoremap <Leader>zc :BCommits<CR>
nnoremap <Leader>zh :History<CR>
nnoremap <Leader>zs :GFiles?<CR>
" }}}
