syntax on                                 " enable syntax highlighting
filetype plugin indent on                 " enable filetype and indentation plugins
set nocompatible                          " we certainly don't care anymore about being compatible
set encoding=utf-8                        " utf-8 all the things

set autoindent                            " keep indentation for new lines
set shiftwidth=2                          " vim shifts by 2 spaces
set softtabstop=2                         " as does tab
set expandtab                             " spaces are my preferred indentation method

augroup Numbertoggle                      " toggle relative line numbers
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

set number                                " show absolute line number at cursor position
set showcmd                               " show contents of command buffer
set ruler                                 " show cursor position
set nomodeline                            " disable modelines (i use local-vimrc for that, it's safer)

set incsearch                             " search as you type
set hlsearch                              " highlight matches
set ignorecase                            " search case insensitive per default...
set smartcase                             " ...but only when there is no uppercase character

set noswapfile                            " disable .swp files
set hidden                                " keep hidden file buffers instead of unloading them

set ttyfast                               " improve drawing speed

set splitright                            " split to right pane
set splitbelow                            " split to bottom pane

" color customizations {{{
set background=dark                       " dark terminal background is default
" Changes have blue-ish font color
hi DiffChange term=bold ctermbg=None ctermfg=4 guibg=DarkMagenta
" Additions have green-ish font color
hi DiffAdd term=bold ctermbg=None ctermfg=2 guibg=DarkMagenta
" Deletions have red-ish font color
hi DiffDelete term=bold ctermbg=None ctermfg=5 guibg=DarkMagenta
" Fold lines of closed folds are lime-ish
hi Folded term=standout ctermbg=None ctermfg=121 guifg=Cyan guibg=DarkGrey
hi SpellBad term=reverse ctermbg=None ctermfg=9 gui=undercurl guisp=Red
hi SyntasticWarning term=reverse ctermbg=None ctermfg=14444 gui=undercurl guisp=Red
hi clear HtmlItalic
" }}}

set nospell                               " disable spell checking (we're mostly in source code files)
augroup Git
  autocmd!
  autocmd FileType gitcommit set spell    " re-enable spell checking for commit messages
augroup END

set wildmenu                              " show auto-complete menu in command mode
set wildmode=longest:full,full            " make autocomplete more intelligent
set wildignore=*/node_modules/*,*/.git/*,*/vendor/*,*/var/*

set showmatch                             " enable bracket highlights
set matchpairs=(:),{:},[:],<:>            " highlight all kinds of brackets

set foldenable                            " enable folding generally
set foldmethod=marker                     " auto-fold by markers
set foldlevel=0                           " auto-fold from first level on

augroup Vue
  autocmd!
  autocmd FileType vue syntax sync fromstart " fix vue files syntax hiccups
augroup END

" custom keyboard mappings {{{
" leader for custom commands, used by plugins
:let mapleader = ","
" allow to use jk to exit insertmode
inoremap jk <esc>
" allow to use jk to exit terminal mode
tnoremap jk <C-W>N
" remap split navigation to shorter combo
nnoremap <C-h> <C-w>h
" remap split navigation to shorter combo
nnoremap <C-j> <C-w>j
" remap split navigation to shorter combo
nnoremap <C-k> <C-w>k
" remap split navigation to shorter combo
nnoremap <C-l> <C-w>l
" disable obnoxious ex mode
nnoremap Q <nop>
" remap W to w
cnoremap W w
" shortcut to edit vimrc
nnoremap <leader>ve :tabnew ~/.vimrc<CR>
" shortcut to reload vimrc
nnoremap <leader>vr :source ~/.vimrc<CR>
" }}}

" vim airline plugin {{{
set runtimepath^=~/.vim/bundle/vim-airline/
set noshowmode
let g:airline#extensions#tagbar#enabled = 1
" }}}

" vim airline theme plugin {{{
set runtimepath^=~/.vim/bundle/vim-airline-themes/
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline_solarized_dark_text = 1
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
" }}}

" vim gitgutter plugin {{{
set runtimepath^=~/.vim/bundle/vim-gitgutter/
let g:gitgutter_map_keys = 0
nnoremap <leader>gp :GitGutterPreviewHunk<CR>
nnoremap <leader>gu :GitGutterUndoHunk<CR>
" }}}

" vim rspec plugin {{{
set runtimepath^=~/.vim/bundle/vim-rspec/
set updatetime=100
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
" }}}

" vim localvimrc plugin {{{
set runtimepath^=~/.vim/bundle/vim-localvimrc/
let g:localvimrc_whitelist=['/Users/bsa/src/.*', '/home/bsa/src/.*']
let g:localvimrc_sandbox=0
" }}}

" vim gutentags plugin {{{
set runtimepath^=~/.vim/bundle/vim-gutentags/
set statusline+=%{gutentags#statusline()}
let g:gutentags_cache_dir='~/.ctagscache/'
" }}}

" vim ctrlp plugin {{{
set runtimepath^=~/.vim/bundle/ctrlp.vim/
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']
let g:ctrlp_match_window = 'min:4,max:10,results:100'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '.*\/(node_modules\|DS_Store\|\.git\|vendor\|var)\/.*'
let g:ctrlp_working_path_mode = 'w'
" }}}

" vim ctrlp-py-matcher plugin {{{
set runtimepath^=~/.vim/bundle/ctrlp-py-matcher/
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" }}}

" syntastic plugin {{{
set runtimepath^=~/.vim/bundle/syntastic/
" }}}

" tagbar plugin {{{
set runtimepath^=~/.vim/bundle/tagbar/
map <Leader>tt :Tagbar<CR>
let g:tagbar_autofocus = 1
" }}}

" ranger plugin {{{
set runtimepath^=~/.vim/bundle/ranger.vim/
map <leader>rr :RangerEdit<cr>
map <leader>rv :RangerVSplit<cr>
map <leader>rs :RangerSplit<cr>
map <leader>rt :RangerTab<cr>
map <leader>ri :RangerInsert<cr>
map <leader>ra :RangerAppend<cr>
map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
map <leader>rd :RangerCD<cr>
map <leader>rld :RangerLCD<cr>
" }}}

" pug syntax plugin {{{
set runtimepath^=~/.vim/bundle/vim-pug/
" }}}

" vim fugitive plugin {{{
set runtimepath^=~/.vim/bundle/vim-fugitive/
" }}}
