if !has('nvim') && empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
   \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
    Plug 'majutsushi/tagbar', {'on': 'Tagbar'}
    Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'embear/vim-localvimrc'
    Plug 'posva/vim-vue', {'for': 'vue'}
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'janko/vim-test'
    Plug 'dense-analysis/ale'
    Plug 'tpope/vim-surround'
    Plug 'mhinz/vim-startify'
call plug#end()

syntax on                                 " enable syntax highlighting
filetype plugin indent on                 " enable filetype and indentation plugins
set nocompatible                          " we certainly don't care anymore about being compatible
set encoding=utf-8                        " utf-8 all the things
set autoindent                            " keep indentation for new lines

set shiftwidth=4                          " vim shifts by 2 spaces
set softtabstop=4                         " as does tab
set tabstop=4                             " existing tabs count as 2 spaces
set expandtab                             " spaces are my preferred indentation method
set shortmess+=I                          " no intro message
set updatetime=500                        " used for the CursorHold autocommand

" display 80 chars text width limit in normal editor windows
augroup ColorColumn
  set colorcolumn=0
  autocmd!
  autocmd BufLeave,FocusLost,WinLeave * set colorcolumn=0
  autocmd BufEnter,FocusGained,WinEnter * if &buftype == "" |set colorcolumn=80
  autocmd BufWinEnter quickfix set colorcolumn=0
  augroup END

augroup CursorLine
  autocmd!
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave * set nocursorline
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * set cursorline
augroup END

augroup Numbertoggle                      " toggle relative line numbers
  autocmd!
  if exists("##TerminalOpen") == "1"
    autocmd TerminalOpen * setlocal nonumber norelativenumber
  endif

  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * call FocusLineNumbers()
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave * call BlurLineNumbers()

  function! BlurLineNumbers()
      if &buftype != "terminal"
          setlocal norelativenumber
      endif
  endfunction

  function! FocusLineNumbers()
      if &buftype != "terminal"
          setlocal relativenumber
      endif
  endfunction
augroup END

augroup ReloadVimRc
    autocmd!
    autocmd BufWritePost ~/.vimrc source ~/.vimrc | execute "normal zx"
augroup END

augroup OpenFile
    autocmd!
    " Go to last known position and center that on screen
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| execute "normal! g'\"zxzz" | endif
augroup END

set scrolloff=5                           " always show two more lines at the window border
set number                                " show absolute line number at cursor position
set showcmd                               " show contents of command buffer
set ruler                                 " show cursor position
set nomodeline                            " disable modelines (i use local-vimrc for that, it's safer)

set incsearch                             " search as you type
set hlsearch                              " highlight matches
set ignorecase                            " search case insensitive per default...
set smartcase                             " ...but only when there is no uppercase character

set noswapfile                            " disable .swp files
set hidden                                " keep hidden file buffers instead of unloading them

set ttyfast                               " improve drawing speed

set splitright                            " split to right pane
set splitbelow                            " split to bottom pane

packadd! matchit                          " improve functionality of %

" color customizations {{{
if !exists('$ITERM_PROFILE') || $ITERM_PROFILE == 'Dark'
    set background=dark                   " dark terminal background is default
    highlight! link Pmenu WildMenu
    highlight! link PmenuSel Normal
    highlight! ALEError ctermbg=8 ctermfg=15
    highlight! link ALEWarning ALEError
    highlight! WildMenu ctermbg=6
else
    set background=light
    highlight! Pmenu ctermbg=7
    highlight! CursorColumn ctermbg=15 guibg=15 cterm=None
    highlight! Visual ctermbg=0 guibg=15
    highlight! ALEError ctermbg=None ctermfg=7
    highlight! link ALEWarning ALEError
endif

au BufEnter,BufNew,Syntax * highlight EOLWhitespace guifg=red guibg=red ctermfg=red ctermbg=red
au BufEnter,BufNew,Syntax * match EOLWhitespace /\s\+$/
" }}}

set nospell                               " disable spell checking (we're mostly in source code files)
augroup Git
  autocmd!
  autocmd FileType gitcommit set spell    " re-enable spell checking for commit messages
augroup END

set wildmenu                              " show auto-complete menu in command mode
set wildmode=longest:full,full            " make autocomplete more intelligent
set wildignore=*/node_modules/*,node_modules/*,*/.git/*,*/vendor/*,*/var/*,var/*

set showmatch                             " enable bracket highlights
set matchpairs=(:),{:},[:],<:>            " highlight all kinds of brackets

set foldenable                            " enable folding generally
set foldmethod=marker                     " auto-fold by markers
set foldlevel=0                           " auto-fold from first level on

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --vimgrep\ --ignore=var/\ --ignore=vendor/\ --ignore=node_modules/
endif

augroup Vue
  autocmd!
  autocmd FileType vue syntax sync fromstart " fix vue files syntax hiccups
augroup END

augroup Terminal
  autocmd!
  if exists("##TerminalOpen") == "1"
    autocmd TerminalOpen * setlocal nonumber norelativenumber
  endif
augroup END

" abbreviations {{{
inoreabbrev ive i've
inoreabbrev im i'm
inoreabbrev youve you've
inoreabbrev youre you're
inoreabbrev hes he's
inoreabbrev shes she's
inoreabbrev weve we've
inoreabbrev were we're
inoreabbrev theyve they've
inoreabbrev theyre they're
inoreabbrev theres there's
inoreabbrev wheres where's
inoreabbrev whys why's
inoreabbrev hows how's
inoreabbrev whats what's
inoreabbrev whens when's
inoreabbrev thats that's
inoreabbrev isnt isn't
inoreabbrev arent aren't
inoreabbrev wasnt wasn't
inoreabbrev werent weren't
inoreabbrev hasnt hasn't
inoreabbrev havent haven't
inoreabbrev mustnt mustn't
inoreabbrev couldnt couldn't
inoreabbrev shouldnt shouldn't
inoreabbrev wouldnt wouldn't
inoreabbrev oclock o'clock
" }}}

function! ToggleWhitespace()
    if &syntax == 'whitespace'
        execute 'set syntax=' . b:original_syntax
    else
        let b:original_syntax = &syntax
        set syntax=whitespace
    endif
endfunction

" netrw settings {{{
" no banner
let g:netrw_banner=0
" tree listing as default
let g:netrw_liststyle=3
" open files in previous window
let g:netrw_browse_split=4
" }}}

" custom keyboard mappings {{{
" leader for custom commands, used by plugins
:let mapleader = ","
" allow to use jk to exit insertmode
inoremap jk <esc>
" allow to use jk to exit terminal mode
tnoremap jk <C-W>N
" remap split navigation to shorter combo
nnoremap <C-h> <C-w>h
" remap split navigation to shorter combo
nnoremap <C-j> <C-w>j
" remap split navigation to shorter combo
nnoremap <C-k> <C-w>k
" remap split navigation to shorter combo
nnoremap <C-l> <C-w>l
" handy quickfix window commands
nnoremap q] :cnext<CR>
nnoremap q[ :cprevious<CR>
" disable obnoxious ex mode
nnoremap Q <nop>
" remap W to w
command! W w
" make Y behave as D, C, etc
nnoremap Y y$
" disable search highlighting
nnoremap <leader>ch :nohlsearch<CR>
" shortcut to edit vimrc
nnoremap <leader>ve :tabnew ~/.vimrc<CR>
" shortcut to reload vimrc
nnoremap <leader>vr :source ~/.vimrc<CR>
" open file navigator on the leftmost side
nnoremap <leader>rr :20Vex<CR>
" toggle whitespace display
nnoremap <leader><space> :call ToggleWhitespace()<CR>
" auto insert closing parenthesis and quotes
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap < <><Left>
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap ` ``<Left>
" handy search shortcut (there is a space at the end and that is intentional)
nnoremap <leader>f :Grep 
" grep should not jump to the first result and open quickfix list
command! -nargs=+ -complete=file Grep grep! <args>
" lgrep should not jump to the first result and open location list
command! -nargs=+ -complete=file Lgrep lgrep! <args>
" copy the current file path to the clipboard
nnoremap <leader>cp :let @*=expand('%')<CR>
" search for all TODOs in the current folder
nnoremap <leader>td :Grep TODO<CR>
" <up> and <down> in command mode search for the most recent partial command
" <c-p> and <c-n> only cycle through history, which is inferior
cnoremap <c-n> <down>
cnoremap <c-p> <up>
" dont jump to the next/previous search result automatically
nnoremap * :let @/=expand("<cword>")<CR> <bar> :set hlsearch<CR>
nnoremap # *
" }}}

" vim airline plugin {{{
set noshowmode
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#gutentags#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#branch#displayed_head_limit=20
" }}}

" vim airline theme plugin {{{
if !exists('$ITERM_PROFILE') || $ITERM_PROFILE == 'Dark'
    let g:airline_theme='base16color'
else
    let g:airline_theme='term_light'
endif
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
" }}}

" vim gitgutter plugin {{{
let g:gitgutter_map_keys = 0
nnoremap <leader>gp :GitGutterPreviewHunk<CR>
nnoremap <leader>gu :GitGutterUndoHunk<CR>
nnoremap ]h :GitGutterNextHunk<CR>
nnoremap [h :GitGutterPrevHunk<CR>
" }}}

" vim localvimrc plugin {{{
let g:localvimrc_whitelist=['/Users/bsa/src/.*', '/home/bsa/src/.*']
let g:localvimrc_sandbox=0
" }}}

" vim gutentags plugin {{{
if exists('*gutentags#statusline')
    set statusline+=%{gutentags#statusline()}
endif
let g:gutentags_cache_dir='~/.ctagscache/'
" }}}

" tagbar plugin {{{
nnoremap <Leader>tt :Tagbar<CR>
let g:tagbar_autofocus = 1
" }}}

" pug syntax plugin {{{
" }}}

" vim fugitive plugin {{{
" }}}

" vim coc plugin {{{
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gy <Plug>(coc-type-definition)
nmap <leader>gi <Plug>(coc-implementation)
nmap <leader>gr <Plug>(coc-references)
nmap <leader>gf <Plug>(coc-refactor)
nmap <leader>gn <Plug>(coc-rename)
imap <expr> <c-space> coc#refresh()
nmap <leader>gs :call <SID>show_documentation()<CR>


function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

augroup cocfunction
    autocmd!
    autocmd CursorHold * silent call CocAction('doHover')
    autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

let g:coc_global_extensions = [
            \'coc-css',
            \'coc-highlight',
            \'coc-html',
            \'coc-json',
            \'coc-phpls',
            \'coc-sh',
            \'coc-solargraph',
            \'coc-tsserver',
            \'coc-vetur'
            \]
" }}}

" FZF plugin {{{
" }}}

" fzf.vim plugin {{{
let $FZF_DEFAULT_OPTS = '--border --bind=ctrl-n:page-down,ctrl-p:page-up'
nnoremap <Leader>zf :Files<CR>
nnoremap <Leader>zt :Tags<CR>
nnoremap <Leader>zb :Buffers<CR>
nnoremap <Leader>zc :BCommits<CR>
nnoremap <Leader>zh :History<CR>
nnoremap <Leader>zs :GFiles?<CR>

function! OpenFloatingWin()
  let height = &lines - 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)

  "Set the position, size, etc. of the floating window.
  "The size configuration here may not be so flexible, and there's room for further improvement.
  let opts = {
        \ 'relative': 'editor',
        \ 'row': height * 0.3,
        \ 'col': col + 15,
        \ 'width': width * 2 / 3,
        \ 'height': height / 2
        \ }

  let buf = nvim_create_buf(v:false, v:true)
  let win = nvim_open_win(buf, v:true, opts)

  "Set Floating Window Highlighting
  call setwinvar(win, '&winhl', 'Normal:Pmenu')

  setlocal
        \ buftype=nofile
        \ nobuflisted
        \ bufhidden=hide
        \ nonumber
        \ norelativenumber
        \ signcolumn=no
endfunction
let g:fzf_layout = { 'window': 'call OpenFloatingWin()' }
" }}}

" {{{ editorconfig files
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}

" {{{ vim-test plugin
nmap <Leader>tn :TestNearest<CR>
nmap <Leader>tf :TestFile<CR>
nmap <Leader>ts :TestSuite<CR>
nmap <Leader>tl :TestLast<CR>
nmap <Leader>tg :TestVisit<CR>
" }}}

" {{{ ale
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_virtualtext_cursor = 1
let g:ale_virtualtext_prefix = 'Error: '
" }}}

" {{{ vim-surround
" }}}

" {{{ vim-startify
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
" }}}
